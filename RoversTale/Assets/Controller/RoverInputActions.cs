//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controller/RoverInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RoverInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RoverInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RoverInputActions"",
    ""maps"": [
        {
            ""name"": ""RoverControls"",
            ""id"": ""d5fce8a1-a7c3-4130-a118-f55432de37f9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""23edd106-626e-4506-9458-bc94a76850f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4ddd29b1-3a6b-4e09-8d66-880dd550a209"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8fc59e13-3008-40c3-bc3b-c3d6d3a10b79"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eed8be85-636d-47f9-8c63-410a2aeef8ba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1d71021e-f2af-4ec9-9ccf-75b0f0194df2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dc30f2ac-a79f-4b99-a7ec-981b3baacee1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RoverControls
        m_RoverControls = asset.FindActionMap("RoverControls", throwIfNotFound: true);
        m_RoverControls_Movement = m_RoverControls.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RoverControls
    private readonly InputActionMap m_RoverControls;
    private IRoverControlsActions m_RoverControlsActionsCallbackInterface;
    private readonly InputAction m_RoverControls_Movement;
    public struct RoverControlsActions
    {
        private @RoverInputActions m_Wrapper;
        public RoverControlsActions(@RoverInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_RoverControls_Movement;
        public InputActionMap Get() { return m_Wrapper.m_RoverControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RoverControlsActions set) { return set.Get(); }
        public void SetCallbacks(IRoverControlsActions instance)
        {
            if (m_Wrapper.m_RoverControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_RoverControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_RoverControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_RoverControlsActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_RoverControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public RoverControlsActions @RoverControls => new RoverControlsActions(this);
    public interface IRoverControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
